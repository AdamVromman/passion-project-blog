---
import BaseHead from "../components/BaseHead.astro";
import "../styles/blogpost.css";
import { BASE } from "../consts";

interface Props {
  title: string;
  description: string;
  pubDate: Date;
  heroImage: string;
  nextPost: string | undefined;
  previousPost: string | undefined;
}

const { title, description, pubDate, heroImage, nextPost, previousPost } =
  Astro.props;
---

<html lang="en">
  <head>
    <BaseHead title={title} description={description} />
  </head>

  <body>
    <main>
      <article class="blog-post">
        <a class="button back-button" href={`${BASE}/`} class="back">Home</a>
        <div class="navigation-buttons">
          {
            previousPost && (
              <a
                class="button previous-button"
                href={`${BASE}/${previousPost}`}
              >
                Previous post
              </a>
            )
          }
          {
            nextPost && (
              <a class="button next-button" href={`${BASE}/${nextPost}`}>
                Next post
              </a>
            )
          }
        </div>

        {
          heroImage && (
            <img
              class="hero-image"
              src={`${BASE}/headers/${heroImage}`}
              alt=""
            />
          )
        }
        <div class="prose">
          <div class="title">
            <div class="date">
              {
                new Intl.DateTimeFormat("en", {
                  dateStyle: "full",
                }).format(pubDate)
              }
            </div>
            <h1>{title}</h1>
            <p class="italic text-sm">"{description}"</p>
            <hr />
          </div>
          <slot />
        </div>
      </article>
    </main>
    <script>
      import { gsap } from "gsap";

      const sources = document.getElementsByClassName("source");

      let selectedSource: Element | null = null;

      for (const source of sources) {
        source.addEventListener("mouseenter", () => {
          source.classList.add("hover");
          selectedSource = source;
        });

        source.addEventListener("mouseleave", () => {
          source.classList.remove("hover");
          selectedSource = null;
        });
      }

      window.addEventListener("mousemove", (e) => {
        if (selectedSource) {
          const apa = selectedSource.children[1];
          gsap.to(apa, {
            x: e.clientX - selectedSource.getBoundingClientRect().left + 40,
            y: e.clientY - selectedSource.getBoundingClientRect().top - 20,
            duration: 0.5,
            overwrite: "auto",
          });
        }
      });
    </script>
  </body>
</html>
